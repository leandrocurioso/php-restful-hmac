<?phpnamespace Library\Toolkit;use Core\Application;use Library\Toolkit\PDOHandler;use Library\Toolkit\Utility;use Exception;/**  Database class  Database class for entire application  @package Library\Toolkit*/class Database  {	/**        @access public        @var array $Databases | Array of databases pdo handler objects from config.xml	*/	public $Databases = array();	/**        Constructor method        @access public        @throws Exception object        @return void	*/	public function __construct(){		try{			self::switch_database();		}catch(Exception $e){			throw $e;		}	}	/**        This method sets the database property array        @access private        @throws Exception object        @param string $ke        @param array $arrValue        @return void	*/	private function set_database($key , $arrValue){		try{				if(is_string($arrValue["enabled"]) && Utility::check_bool($arrValue["enabled"]) && filter_var($arrValue["enabled"], FILTER_VALIDATE_BOOLEAN)){					$this->Databases[$key] = new PDOHandler($arrValue['dbms'] ,	$arrValue['host'], $arrValue['user'] , $arrValue['password'], $arrValue['database_name'] );				}		}catch(Exception $e){			throw $e;		}	}	/**        This method switches the databases for each given key of config.xml database node        @access private        @throws Exception object        @return void	*/	private function switch_database(){		try{			$databases = Application::config("database") ;			foreach($databases as $key => $value) {				if(is_array($databases[$key]['password'])){					$databases[$key]['password'] = "";				}				self::set_database($key , $databases[$key]);			}		}catch(Exception $e){			throw $e;		}	}}
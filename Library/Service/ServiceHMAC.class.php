<?phpnamespace Library\Service;use Core\Application;use Library\_Interface\IServiceHMAC;use Library\Toolkit\HttpHandler;use Library\Toolkit\Utility;use Library\Toolkit\AnnotationCore;use Library\BusinessCore\ApiBC;use Library\ValueObject\ApiApplicationVO;use Library\ValueObject\ApiUserTokenVO;use Exception;/**    Service HMAC class    This class is responsible for web service calls    @package Library\Service    @interface IServiceHMAC*/abstract class ServiceHMAC implements IServiceHMAC {	/**        @access protected        @var object $AnnotationCore | Annotation core object	*/	protected $AnnotationCore;	/**        @access public        @var object $Application | Application object	*/	public $Application;	/**        @access public        @static        @var array $SupportedMethods | Array of supported methods	*/	protected static $SupportedMethods = array(																			"GET",																			"POST",																			"PUT",																			"DELETE"																		);	/**        @access public        @static        @var array $ContentType | Array of content type	*/	public static $ContentType = array(										"json" => "application/json",										"xml"  => "application/xml",										"text" => "text/plan"		              );	/**        @access protected        @var string $Authentication | Boolean to check if web method call needs authorization	*/	protected $Authentication = true;	/**        @access protected        @var array $Headers | String with the request headers	*/	protected $Headers;	/**        @access protected        @var object $ApiBC | Business core from core web service	*/	protected $ApiBC;	/**        @access protected        @var object $ApiApplicationVO | Api application value object	*/	protected $ApiApplicationVO;	/**        @access protected        @var object $ApiUserTokenVO | Api application user token value object	*/	protected $ApiUserTokenVO;	/**        @access protected        @static        @var array $UnauthenticatedRoute | Unauthenticated routes	*/	protected static $UnauthenticatedRoute;	/**        @access protected        @var object $Get | Object with the get content	*/	protected $Get;	/**        @access protected        @var object $Post | Object with the post content	*/	protected $Post;	/**        @access protected        @var object $Put | Object with the put content	*/	protected $Put;	/**        @access protected        @var object $Delete | Object with the delete content	*/	protected $Delete;	/**        @access protected        @var object $Files | Object with the files content	*/	protected $Files;	/**        Constructor method        @access public        @throws Exception object        @param object $app | Application object        @return void	*/	public function __construct(Application $app = null){		try{				//Set app object				if($app != null){					$this->Application = $app;				}				//Headers				$this->Headers = Utility::array_to_object(getallheaders());				//Validate timestamp				self::validate_timestamp();				//Set annotation core				$this->AnnotationCore = new AnnotationCore();				//Check supported http method				self::check_supported_http_method();				//Set unauthenticated route				self::set_unauthenticated_route();				//Set authorization				self::set_authentication();				//Set class properties				$this->ApiApplicationVO = new ApiApplicationVO();				$this->ApiUserTokenVO = new ApiUserTokenVO();				$this->ApiBC = new ApiBC();				//Listen				self::listen();				//Validate api key				self::validate_api_key();			}catch(Exception $e){				throw $e;			}    }	/**        This method sets the authentication of the called service        @access public        @throws Exception object        @return void	*/	public function set_authentication(){		try{			if(!in_array($this->Application->request_structure("entity") , self::$UnauthenticatedRoute)){				if(!isset(self::$UnauthenticatedRoute[$this->Application->request_structure("entity")][$this->Application->request_structure("webMethod")])){					$this->Authentication = true;				}else{					$this->Authentication = false;				}			}else{				$this->Authentication = false;			}		}catch(Exception $e){			throw $e;		}	}	/**        This method validates if the timestamp is valid        @access public        @throws Exception object        @return void	*/	public function validate_timestamp(){		try{			//Look for header timestamp			if(!isset($this->Headers->{"X-Timestamp"}) || !is_numeric($this->Headers->{"X-Timestamp"})){				HttpHandler::header(400);			}			//Check if timestamp isn't expired			 $timediff = (int)(time() - $this->Headers->{"X-Timestamp"});			if( $timediff >= $this->Application->config("service->request_timeout"))  {				HttpHandler::header(408);			}		}catch(Exception $e){			throw $e;		}	}	/**        This method authenticate the user        @access public        @throws Exception object        @return string	*/	public function auth_user(){		try{			self::response($this->ApiBC->auth_user($this->Post));		}catch(Exception $e){			throw $e;		}	}	/**        This method validates the api key        @access public        @throws Exception object        @return void	*/	public function validate_api_key(){		try{			//Look for header api key			if(!isset($this->Headers->{"Api-Key"})){				HttpHandler::header(400);			}else{				$this->ApiApplicationVO->ApiKey = $this->Headers->{"Api-Key"};				$result = $this->ApiBC->check_api_key($this->ApiApplicationVO);				if(isset($result->ApiSecretKey)){					$this->ApiApplicationVO->ApiSecretKey = $result->ApiSecretKey;				}				if(!isset($this->ApiApplicationVO->ApiSecretKey)){					HttpHandler::header(401);				}else{					if($this->Authentication){						self::validate_hmac_header();					}else{						self::execute_method();					}				}			}		}catch(Exception  $ex){			throw $ex;		}	}	/**        This method validates the hmac header        @access private        @throws Exception object        @return void	*/	private function validate_hmac_header(){		try{			if(!isset($this->Headers->{"Authorization"}) || $this->Headers->{"Authorization"} == null){				Utility::debug($this->Headers); exit;				HttpHandler::header(401);			}else{				$this->ApiUserTokenVO->ApiToken = $this->Headers->{"Authorization"};				$requestBody = ucfirst(strtolower($this->Application->Url->RequestMethod));				$this->$requestBody = self::$requestBody();				$param = [							"user_table_label"   => $this->Application->config("service->user_table"),							"auth_user_id_label" => $this->Application->config("service->auth_user_id_label"),							"user_active_label"  => $this->Application->config("service->user_active_label"),							"user_token"         => $this->Headers->{"Authorization"},							"entity"             => $this->Application->request_structure("entity"),							"service"            => $this->Application->request_structure("webMethod"),							"parameter"          => $this->Application->request_structure("parameter"),							"http_verb"          => $this->Application->Url->RequestMethod,							"client_ip"          => $this->Headers->{"Client-Ip"},							"server_ip"          => Utility::get_client_ip(),							"api_key"           =>  $this->Headers->{"Api-Key"},							"content"           =>  json_encode($this->$requestBody)				 ];				$result = $this->ApiBC->check_authorization_token($param);				if(!isset($result->UserId) || $result->UserId <= 0){					HttpHandler::header(401);				}else{					$this->ApiUserTokenVO->UserId = $result->UserId;				}			}			if(!isset($this->Headers->{"Hmac-Hash"})){				HttpHandler::header(401);			}else{				$httpQuery = Utility::build_http_query($this->$requestBody);				$hmacHash = hash_hmac('sha256', $httpQuery.$this->Headers->{"X-Timestamp"}, $this->ApiApplicationVO->ApiSecretKey);				if($this->Headers->{"Hmac-Hash"} != $hmacHash){					HttpHandler::header(401);				}else{					self::execute_method();				}			}		}catch(Exception  $ex){			throw $ex;		}	}	/**        This method sets the unauthenticated routes        @access public        @throws Exception object        @return void	*/	public function set_unauthenticated_route(){		try{			if(self::$UnauthenticatedRoute == null){				self::$UnauthenticatedRoute = json_decode(json_encode((array)get_object_vars(simplexml_load_file($this->Application->config('file->unauthenticated_route')))), true);			}		}catch(Exception  $e){			throw $ex;		}	}	/**      This method response to the client      @access public      @throws Exception object     	@param string $data     	@param string $code      @return void	*/	public function response($data ,$code = ""){		try{			$response = [];			$response["status"] = false;			$response["exception"] = null;			$response["data"] = null;			if(is_object($data) && (get_class($data) == "Exception" or get_class($data) == "PDOException")){					$response["exception"] = $data;					$response["status"] = false;			}else{					$response["data"] = $data;					$response["status"] = true;			}      exit(json_encode($response));		}catch(Exception  $e){			throw $e;		}	}	/**        This method checks if the http method is supported        @access public        @throws Exception object        @return void	*/    public function check_supported_http_method() {    	try{    		//Process method annotation			$methodNewInstance =  $this->Application->request_structure("webMethod");            if(!in_array($this->Application->Url->RequestMethod, self::$SupportedMethods) || !$this->AnnotationCore->process_method_annotation($this, $methodNewInstance)){                HttpHandler::header(405);            }    	}catch (Exception  $e){    		throw $e;    	}    }	/**        This method gets the $_GET content        @access public        @throws Exception object        @return object	*/	public function get() {		try{			$result = null;			if(count($_GET) > 0){				$result = (object) Utility::array_to_object($_GET);			}		}catch (Exception  $e){    		throw $e;    	}		return $result;	}	/**        This method gets the $_POST content        @access public        @throws Exception object        @return object	*/	public function post() {		try{			$result = null;			if(count($_POST) > 0){				$result = (object) Utility::array_to_object($_POST);			}		}catch (Exception $e){    		throw $e;    	}		return $result;	}	/**        This method gets the php://input content        @access public        @throws Exception object        @return object	*/	public function put() {		try{			return (object) Utility::array_to_object($this->Put);		}catch (Exception  $e){    		throw $e;    	}	}	/**        This method gets the php://input content        @access public        @throws Exception object        @return object	*/	public function delete() {		try{			return (object) Utility::array_to_object($this->Delete);		}catch (Exception  $e){    		throw $e;    	}	}	/**        This method gets the $_FILES content        @access public        @throws Exception object        @return object	*/	public function files() {		try{			$result = null;			if($_FILES != null){				$result = (object) Utility::array_to_object($_FILES);			}		}catch (Exception  $e){    		throw $e;    	}		return $result;	}	/**        This method listen the client request and sets the objects        @access public        @throws Exception object        @return object	*/	public function listen(){		try{			if($this->Application->Url->RequestMethod == "PUT"){				parse_str(file_get_contents('php://input'), $this->Put);			}			if($this->Application->Url->RequestMethod == "DELETE"){				parse_str(file_get_contents('php://input'), $this->Delete);			}			$this->Get  = $_GET;			$this->Post = $_POST;			$this->Files = $_FILES;		}catch (Exception  $e){			throw $e;		}	}	/**        This method executes the method of client request        @access public        @throws Exception object        @return void	*/	public function execute_method(){		try{			$this->Get  = self::get();			$this->Post = self::post();			$this->Files = self::files();			$this->Put = self::put();			$this->Delete = self::delete();			$methodNewInstance =  $this->Application->request_structure("webMethod");			$this->$methodNewInstance();			exit;		}catch(Exception $e){			throw $e;		}	}}